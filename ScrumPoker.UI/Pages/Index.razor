@page "/"

@using Microsoft.AspNetCore.SignalR.Client
@using ScrumPoker.Model.Model
@using ScrumPoker.Model.Enums
@using ScrumPoker.Model
@inject NavigationManager NavigationManager
@implements IDisposable
@using Microsoft.AspNetCore.WebUtilities;


@*ToDo : Bu kontrol düzenlenmeli*@
@if (!room.Users.Any())
{
    <h3>Room</h3>
    <div class="justify-content-center">
        <div class="col-6">
            <div class="form-group row">
                <label class="col-sm-2 col-form-label">Room Name</label>
                <div class="input-group col-sm-10">
                    <input ype="text" class="form-control" @bind="room.Name" placeholder="Room Name" t>
                    <div class="input-group-append">
                        <button @onclick="GenerateGuid" class="btn btn-success">Guid</button>
                    </div>
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-2 col-form-label">User Name</label>
                <div class="col-sm-10">
                    <input type="text" class="form-control" @bind="userName" placeholder="User Name">
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-2">Role :</label>
                @foreach (RoleType item in Enum.GetValues(typeof(RoleType)))
                {
                    <div class="col-sm-2">
                        <input type="radio" name="Role" id="@item" value="@item" checked=@(item==RoleType.DEV) @onchange=@(()=>role=item) />
                        <label for="@item">@item.GetEnumDescription()</label>
                    </div>
                }
            </div>
            <div class="form-group row">
                <div class="col-sm-10">
                    <button @onclick="Create" class="btn btn-primary" disabled="@(!IsConnected)">Create</button>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <Voting votingRoom=room votinghubConnection=hubConnection user=user />
}


@code {
    private Room room = new Room
    {
        Users = new List<User>(),
        VotedTaskList = new List<JiraTask>()
    };
    private HubConnection hubConnection;
    private string userName;
    User user;
    RoleType role= RoleType.DEV;

    private void GenerateGuid()
    {
        room.Name = Guid.NewGuid().ToString();
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/roomhub"))
            .Build();

        hubConnection.On<Room>("ReceiveMessage", (data) =>
        {
            room = data;
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    async Task Create()
    {
        user = new User()
        {
            Id = Guid.NewGuid(),
            Name = userName,
            Role = role
        };
        await hubConnection.SendAsync("JoinRoomAsync", room, user);
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;


    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
}
