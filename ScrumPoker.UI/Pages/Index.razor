@page "/"

@using Microsoft.AspNetCore.SignalR.Client
@using ScrumPoker.Model.Model
@using ScrumPoker.Model.Enums
@using ScrumPoker.Model
@inject NavigationManager NavigationManager
@implements IDisposable

<div class="container w-50">
    <div class="card">
        <div class="card-body">
            <div class="form-group row">
                <label class="col-sm-3 col-form-label text-right font-weight-bold">Room Name:</label>
                <div class="col-sm-9">
                    <div class="input-group">
                        <input type="text" class="form-control" @bind="room.Name" placeholder="Room Name" />
                        <div class="input-group-append">
                            <button @onclick="GeneratePrivateRoom" class="btn btn-success">Private Room</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-3 col-form-label text-right font-weight-bold">User Name:</label>
                <div class="col-sm-9">
                    <input type="text" class="form-control" @bind="userName" placeholder="User Name">
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-3 col-form-label text-right font-weight-bold">Role:</label>
                <div class="col-sm-9">

                    @foreach (RoleType item in Enum.GetValues(typeof(RoleType)))
                    {
                        <div class="row">
                            <div class="col mt-2">
                                <input type="radio" name="Role" id="@item" value="@item" checked=@(item==RoleType.DEV) @onchange=@(() => role = item) />
                                <label for="@item">@item.GetEnumDescription()</label>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="form-group row">
                <div class="col-sm-12 d-flex justify-content-center">
                    <button @onclick="JoinRoom" class="btn btn-primary" disabled="@(!IsConnected)">Join Room</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private Room room = new Room
    {
        Users = new List<User>(),
        VotedTaskList = new List<JiraTask>()
    };

    private HubConnection hubConnection;
    private string userName;
    User user;
    RoleType role = RoleType.DEV;

    private void GeneratePrivateRoom()
    {
        room.Name = Guid.NewGuid().ToString("N");
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/roomhub"))
            .Build();

        hubConnection.On<Room>("ReceiveMessage", (data) =>
        {
            room = data;
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    async Task JoinRoom()
    {
        user = new User()
        {
            Id = Guid.NewGuid(),
            Name = userName,
            Role = role,
            IsActive = true
        };
        await hubConnection.SendAsync("JoinRoomAsync", room, user);
        NavigationManager.NavigateTo($"/lobby/{room.Name}/{user.Name}");
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;


    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
}
