@page "/lobby/{roomName}/{userName}"
@using Microsoft.AspNetCore.SignalR.Client
@using ScrumPoker.Model.Model
@using ScrumPoker.Model.Enums
@using ScrumPoker.Common
@using ScrumPoker.UI.Components
@inject NavigationManager NavigationManager


<style type="text/css">
    .user-list {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
    }

    .user-card {
        border-radius: 5px;
        height: 140px;
        max-width: 160px;
        width: 45vw;
        font-size: 18px;
        font-weight: 500;
        letter-spacing: 0;
        text-align: center;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        position: relative;
        margin: 15px;
    }
</style>

<div class="row">
    <div class="col">
        <TimerComponent room="@room" hubConnection="@hubConnection" username="@Username" />
    </div>
</div>

@if (room?.VotingTask?.Status == null)
{
    <div class="container">
        <div class="row mb-5">
            <div class="col">
                <div class="card">
                    <div class="card-body text-center">
                        <h3 class="card-title">Room: @RoomName</h3>
                        <div class="row">
                            <div class="col">
                                <button type="button" class="btn btn-success btn-lg" @onclick="StartVoting">Start Voting</button>
                            </div>
                        </div>

                        @if (developers?.Count > 0)
                        {
                            @for (int i = 0; i < developers.Count; i += 5)
                            {
                                <div class="row d-flex justify-content-center">
                                    @foreach (var developer in developers.Skip(i).Take(5))
                                    {
                                        <div class="user-list">
                                            <div class="user-card border">
                                                <h5 class="card-title">@developer.Name</h5>
                                                <span class="badge @(developer.IsActive ? "badge-success" : "badge-danger") text-white">@(developer.IsActive ? "joined" : "offline")</span>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>

        @if (room?.VotedTaskList?.Count > 0)
        {
            <div class="card">
                <div class="card-header">
                    Task History
                </div>
                <ul class="list-group list-group-flush">
                    @foreach (var task in room?.VotedTaskList ?? new List<JiraTask>())
                    {
                        <li class="list-group-item">@task.Name - @ScrumPoker.Model.Extensions.GetEnumDescription(task.ComfirmedPoint)</li>
                    }
                </ul>
            </div>
        }
    </div>
}
else if (room?.VotingTask?.Status == JiraTaskStatus.Completed)
{
    <div class="container">
        <div class="row mb-5">
            <div class="col">
                <div class="card">
                    <div class="card-body text-center">
                        <h3 class="card-title">Room: @RoomName</h3>
                        <h5 class="card-subtitle">Avarage: @room.VotingTask.Average.ToString("###.##")</h5>

                        @if (new[] { RoleType.PO, RoleType.SM }.Contains((RoleType)room?.Users?.FirstOrDefault(p => p.Name == Username)?.Role))
                        {
                            <button type="button" class="btn btn-primary mt-3" data-toggle="modal" data-target="#exampleModal" @onclick=@(() => comfirmedTaskPoint = VotePointHelper.GetNearestCard(room.Users.Where(p => p.Point != null).Select(s => (CardPoints)s.Point).ToList()))>
                                Final Decision
                            </button>
                        }

                        @if (developers?.Count > 0)
                        {
                            @for (int i = 0; i < developers.Count; i += 5)
                            {
                                <div class="row d-flex justify-content-center">
                                    @foreach (var developer in developers.Skip(i).Take(5))
                                    {
                                        <div class="user-list">
                                            <div class="user-card border">
                                                <h5 class="card-title">@developer.Name</h5>
                                                <span class="badge rounded-pill">@ScrumPoker.Model.Extensions.GetEnumDescription(@developer.Point)</span>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Final Decision</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p class="text-muted">The card point selected here will be the final decision for the task.</p>

                    <div class="form-group">
                        <label>Task</label>
                        <input type="text" class="form-control" @bind="votedTaskName" placeholder="Task Name">
                    </div>
                    <div class="form-group">
                        <label>Point</label>
                        <select class="form-control" @bind=@comfirmedTaskPoint>
                            @foreach (var card in Enum.GetValues(typeof(CardPoints)).Cast<CardPoints>().ToList())
                            {
                                <option value=@card>@ScrumPoker.Model.Extensions.GetEnumDescription(card)</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success" @onclick="SaveVoting" data-dismiss="modal">Save Voting</button>
                </div>
            </div>
        </div>
    </div>
}
else if (RoleType.DEV != developers?.FirstOrDefault(x => x.Name == Username)?.Role || room?.VotingTask?.Status == JiraTaskStatus.Voting && developers?.FirstOrDefault(x => x.Name == Username)?.Point != null)
{
    <div class="container">
        <div class="row mb-5">
            <div class="col">
                <div class="card">
                    <div class="card-body text-center">
                        <h3 class="card-title">Room: @RoomName</h3>

                        @if (new[] { RoleType.PO, RoleType.SM }.Contains((RoleType)room?.Users?.FirstOrDefault(p => p.Name == Username)?.Role))
                        {
                            <div class="row">
                                <div class="col">
                                    <button type="button" class="btn btn-success btn-lg" @onclick="StopVoting">Stop Voting</button>
                                </div>
                            </div>
                        }

                        @if (developers?.Count > 0)
                        {
                            @for (int i = 0; i < developers.Count; i += 5)
                            {
                                <div class="row d-flex justify-content-center">
                                    @foreach (var developer in developers.Skip(i).Take(5))
                                    {
                                        <div class="user-list">
                                            <div class="user-card border">
                                                <h5 class="card-title">@developer.Name</h5>
                                                <span class="badge @(developer.IsActive && developer.Point != null ? "badge-success" : "badge-warning")">@(developer.IsActive ? (developer.Point != null ? "voted" : "voting") : "offline")</span>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <Voting votinghubConnection=@hubConnection votingRoom=@room user=@developers?.FirstOrDefault(x => x.Name == Username) />
}

@code {

    [Parameter] public string RoomName { get; set; }
    [Parameter] public string Username { get; set; }

    private string taskName;
    private CardPoints agreedCard;

    private HubConnection hubConnection;
    private Room room;
    private List<User> developers;

    private string votedTaskName;
    private CardPoints? comfirmedTaskPoint;
    private int nearestPoint;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/roomhub"))
            .Build();

        hubConnection.On<Room>("ReceiveMessage", (data) =>
        {
            room = data;
            developers = data.Users.Where(x => x.Role == RoleType.DEV).ToList();
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("GetGroupMessages", RoomName);
    }

    protected async Task StartVoting()
    {
        var task = new JiraTask
        {
            Status = JiraTaskStatus.Voting
        };

        await hubConnection.SendAsync("StartVoting", RoomName, task);
    }

    protected async Task SaveVoting()
    {
        await hubConnection.SendAsync("SaveTask", RoomName, votedTaskName, comfirmedTaskPoint);

        votedTaskName = string.Empty;
        comfirmedTaskPoint = null;
    }

    protected async Task StopVoting()
    {
        await hubConnection.SendAsync("StopVoting", RoomName);
    }
}
