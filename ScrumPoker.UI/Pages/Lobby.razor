@page "/lobby/{roomName}/{userName}"
@using Microsoft.AspNetCore.SignalR.Client
@using ScrumPoker.Model.Model
@using ScrumPoker.Model.Enums
@using ScrumPoker.Common
@using ScrumPoker.UI.Components
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage


<style type="text/css">
    .user-list {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
    }

    .user-card {
        border-radius: 5px;
        height: 140px;
        max-width: 160px;
        width: 45vw;
        font-size: 18px;
        font-weight: 500;
        letter-spacing: 0;
        text-align: center;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        position: relative;
        margin: 15px;
    }
</style>

<TimerComponent room="@room" hubConnection="@hubConnection" username="@Username" />

<ul>
    @foreach (var task in room?.VotedTaskList ?? new List<JiraTask>())
    {
        <li><h5>@task.Name : @ScrumPoker.Model.Extensions.GetEnumDescription(task.ComfirmedPoint)</h5></li>
    }
</ul>



@if (room?.VotingTask?.Status == null)
{<div class="container">
        <div class="row mb-5">
            <div class="col">
                <div class="card">
                    <div class="card-body text-center">
                        <h3 class="card-title">Room: @RoomName</h3>
                        <div class="row">
                            <div class="col">
                                <button type="button" class="btn btn-success btn-lg" @onclick="StartVoting">Start Voting</button>
                            </div>
                        </div>


                        @if (developers?.Count > 0)
                        {
                            @for (int i = 0; i < developers.Count; i += 5)
                            {
                                <div class="row d-flex justify-content-center">
                                    @foreach (var developer in developers.Skip(i).Take(5))
                                    {
                                        <div class="user-list">
                                            <div class="user-card border">
                                                <h5 class="card-title">@developer.Name</h5>
                                                <span class="badge rounded-pill @(developer.IsActive ? "bg-success" : "bg-danger") text-white">@(developer.IsActive ? "Online" : "Offline")</span>
                                                @if (isAdmin())
                                                {
                                                    <button @onclick="@(p=>KickUser(developer.Name))" style="margin-left: auto;margin-bottom: auto; margin-top: 0; margin-right: 0; padding:15px 15px 15px 15px;">x</button>
                                                }

                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        }

                    </div>
                </div>
            </div>
        </div>
    </div>
}
else if (room?.VotingTask?.Status == JiraTaskStatus.Completed)
{
    <h3 class="card-title">Avarage: @room.VotingTask.Average.ToString("###.##")</h3>

    @if (new[] { RoleType.PO, RoleType.SM }.Contains((RoleType)room?.Users?.FirstOrDefault(p => p.Name == Username)?.Role))
    {
        <div class="form-group row">
            <div class="col-sm-5">
                <input type="text" class="form-control" @bind="votedTaskName" placeholder="Task Name">
            </div>

            <select @bind=@comfirmedTaskPoint>
                @foreach (var card in Enum.GetValues(typeof(CardPoints)).Cast<CardPoints>().ToList())
                {
                    @*Parametrenin ilk değeri setleniyor*@
                    if (VotePointHelper.GetNearestCard(room.Users.Where(p => p.Point != null).Select(s => (CardPoints)s.Point).ToList()) == card)
                    {
                        comfirmedTaskPoint = card;
                    }
                    <option value=@card selected=@(VotePointHelper.GetNearestCard(room.Users.Where(p => p.Point != null).Select(s => (CardPoints)s.Point).ToList())==card)>@ScrumPoker.Model.Extensions.GetEnumDescription(card)</option>
                }
            </select>

        </div>

        <div class="row">
            <div class="col">
                <button type="button" class="btn btn-success btn-lg" @onclick="SaveVoting">Save Voting</button>
            </div>
        </div>
    }
    @if (developers?.Count > 0)
    {
        @for (int i = 0; i < developers.Count; i += 5)
        {
            <div class="row d-flex justify-content-center">
                @foreach (var developer in developers.Skip(i).Take(5))
                {
                    <div class="user-list">
                        <div class="user-card border">
                            <h5 class="card-title">@developer.Name</h5>
                            <span class="badge rounded-pill">@ScrumPoker.Model.Extensions.GetEnumDescription(@developer.Point)</span>
                        </div>
                    </div>
                }
            </div>
        }
    }
}
else if (RoleType.DEV != developers?.FirstOrDefault(x => x.Name == Username)?.Role || room?.VotingTask?.Status == JiraTaskStatus.Voting && developers?.FirstOrDefault(x => x.Name == Username)?.Point != null)
{
    @if (new[] { RoleType.PO, RoleType.SM }.Contains((RoleType)room?.Users?.FirstOrDefault(p => p.Name == Username)?.Role))
    {
        <div class="col">
            <button type="button" class="btn btn-success btn-lg" @onclick="StopVoting">Stop Voting</button>
        </div>
    }


    @if (developers?.Count > 0)
    {
        @for (int i = 0; i < developers.Count; i += 5)
        {
            <div class="row d-flex justify-content-center">
                @foreach (var developer in developers.Skip(i).Take(5))
                {
                    <div class="user-list">
                        <div class="user-card border">
                            <h5 class="card-title">@developer.Name</h5>
                            <span class="badge rounded-pill @(developer.IsActive && developer.Point!=null? "bg-success" : "bg-danger") text-white">@(developer.IsActive ? (developer.Point != null? "Voted":"Waiting") : "Offline")</span>
                        </div>
                    </div>
                }
            </div>
        }
    }
}
else
{
    <Voting votinghubConnection=@hubConnection votingRoom=@room user=@developers?.FirstOrDefault(x => x.Name == Username) />
}

@code {

    [Parameter] public string RoomName { get; set; }
    [Parameter] public string Username { get; set; }

    private int userRole { get; set; }

    private string taskName;
    private CardPoints agreedCard;

    private HubConnection hubConnection;
    private Room room;
    public Room _room
    {
        get
        {
            return room;
        }
        set
        {
            room = value;
            if (room.Users.FirstOrDefault(p => p.Name.Equals(Username)) == null)
                NavigationManager.NavigateTo($"/");
        }
    }

    private List<User> developers;

    private string votedTaskName;
    private CardPoints? comfirmedTaskPoint;
    private int nearestPoint;

    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/roomhub"))
        .Build();

        hubConnection.On<Room>("ReceiveMessage", (data) =>
        {
            _room = data;
            developers = data.Users.Where(x => x.Role == RoleType.DEV).ToList();

            StateHasChanged();
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("GetGroupMessages", RoomName);

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //if (firstRender)
        //{
        userRole = await localStorage.GetItemAsync<int>("userRole");
        //}
    }

    protected async Task StartVoting()
    {
        var task = new JiraTask
        {
            Status = JiraTaskStatus.Voting
        };

        await hubConnection.SendAsync("StartVoting", RoomName, task);
    }

    void KickUser(string kickUserName)
    {
        hubConnection.SendAsync("LeaveRoomAsync", room.Name, kickUserName);
        localStorage.ClearAsync();
    }

    private bool isAdmin()
    {
        return ((int)userRole == (int)RoleType.SM || (int)userRole == (int)RoleType.PO);
    }


    protected async Task SaveVoting()
    {
        await hubConnection.SendAsync("SaveTask", RoomName, votedTaskName, comfirmedTaskPoint);

        votedTaskName = string.Empty;
        comfirmedTaskPoint = null;
    }

    protected async Task StopVoting()
    {
        await hubConnection.SendAsync("StopVoting", RoomName);
    }
}
