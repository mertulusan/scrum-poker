@page "/lobby/{roomName}/{userName}"
@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage


    <div class="row">
        <nav>
            <div class="nav nav-tabs" id="nav-tab" role="tablist">
                <a class="nav-link active" id="nav-home-tab" data-toggle="tab" href="#nav-home" role="tab" aria-controls="nav-home" aria-selected="true">Home</a>
                <a class="nav-link" id="nav-profile-tab" data-toggle="tab" href="#nav-profile" role="tab" aria-controls="nav-profile" aria-selected="false">Profile</a>
                <a class="nav-link" id="nav-contact-tab" data-toggle="tab" href="#nav-contact" role="tab" aria-controls="nav-contact" aria-selected="false">Contact</a>
            </div>
        </nav>
        <div class="tab-content" id="nav-tabContent">
            <div class="tab-pane fade show active" id="nav-home" role="tabpanel" aria-labelledby="nav-home-tab">...</div>
            <div class="tab-pane fade" id="nav-profile" role="tabpanel" aria-labelledby="nav-profile-tab">...</div>
            <div class="tab-pane fade" id="nav-contact" role="tabpanel" aria-labelledby="nav-contact-tab">...</div>
        </div>

        @if (room != null)
        {
            <Tabs>
                <Tab>
                    <Header>
                        <i class="fa fa-th-list" style="margin:5px"></i>
                        <span class="badge badge-success"> @room?.VotedTaskList?.Count</span>
                    </Header>
                    <ChildContent>
                        @if (room.VotedTaskList.Any())
                        {
                            <TaskListComponent jiraTasks="@room.VotedTaskList"></TaskListComponent>
                        }
                    </ChildContent>
                </Tab>

                @if (room.Users.Any())
                {
                    <Tab>
                        <Header>
                            <i class="fa fa-users" style="margin:5px"></i>
                            <span class="badge badge-warning"> @room?.Users?.Count   </span>
                        </Header>
                        <ChildContent>
                            <UserListComponent users="@room.Users"></UserListComponent>
                        </ChildContent>
                    </Tab>
                }
            </Tabs>
        }
    </div>
</div>


<div class="content-panel animated fadeInRight">
    @if (room?.VotingTask?.Status == null)
    {
        <div class="card">
            <div class="card-body justify-content-center">
                <button type="button" class="btn btn-success btn-md" @onclick="StartVoting">Start Voting</button>
            </div>
        </div>

        @if (developers?.Count > 0)
        {
            @for (int i = 0; i < developers.Count; i += 5)
            {
                <div class="row d-flex justify-content-center ">
                    <div class="user-list">
                        @foreach (var developer in developers.Skip(i).Take(5))
                        {
                            <div class="user-card">
                                <div class="user-card-title">
                                    @if (isAdmin())
                                    {
                                        <a class="float-right" @onclick="@(p=>KickUser(developer.Name))"><i class="fa fa-remove"></i></a>
                                    }
                                </div>
                                <div class="user-card-content">
                                    <h2>@developer.Name</h2>
                                    <span class="badge  @(developer.IsActive ? "badge-success" : "badge-danger") text-white">@(developer.IsActive ? "Online" : "Offline")</span>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        }
    }
    else if (room?.VotingTask?.Status == JiraTaskStatus.Completed)
    {
        <div class="card">
            <div class="card-body justify-content-center">
                <h5 class="card-subtitle">Avarage: @room.VotingTask.Average.ToString("###.##")</h5>

                @if (new[] { RoleType.PO, RoleType.SM }.Contains((RoleType)room?.Users?.FirstOrDefault(p => p.Name == Username)?.Role))
                {
                    <button type="button" class="btn btn-primary mt-3" data-toggle="modal" data-target="#exampleModal" @onclick=@(() => comfirmedTaskPoint = VotePointHelper.GetNearestCard(room.Users.Where(p => p.Point != null).Select(s => (CardPoints)s.Point).ToList()))>
                        Final Decision
                    </button>

                }
            </div>
        </div>

        @if (developers?.Count > 0)
        {
            <div class="row d-flex justify-content-center">
                <div class="user-list">
                    @for (int i = 0; i < developers.Count; i += 5)
                    {
                        @foreach (var developer in developers.Skip(i).Take(5))
                        {
                            <div class="user-card">
                                <div class="user-card-title">
                                    @if (isAdmin())
                                    {
                                        <a class="float-right" @onclick="@(p=>KickUser(developer.Name))"><i class="fa fa-remove"></i></a>
                                    }
                                </div>
                                <div class="user-card-content">
                                    <h2>@developer.Name</h2>
                                    <span class="badge badge-primary">@ScrumPoker.Model.Extensions.GetEnumDescription(@developer.Point)</span>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        }
    }
    else if (RoleType.DEV != developers?.FirstOrDefault(x => x.Name == Username)?.Role || room?.VotingTask?.Status == JiraTaskStatus.Voting && developers?.FirstOrDefault(x => x.Name == Username)?.Point != null)
    {

        @if (new[] { RoleType.PO, RoleType.SM }.Contains((RoleType)room?.Users?.FirstOrDefault(p => p.Name == Username)?.Role))
        {
            <div class="card">
                <div class="card-body justify-content-center">
                    <button type="button" class="btn btn-warning btn-md" @onclick="StopVoting">Stop Voting</button>
                </div>
            </div>
        }

        @if (developers?.Count > 0)
        {
            <div class="row d-flex justify-content-center">
                <div class="user-list">
                    @for (int i = 0; i < developers.Count; i += 5)
                    {

                        @foreach (var developer in developers.Skip(i).Take(5))
                        {
                            <div class="user-card">
                                <div class="user-card-title">
                                    @if (isAdmin())
                                    {
                                        <a class="float-right" @onclick="@(p=>KickUser(developer.Name))"><i class="fa fa-remove"></i></a>
                                    }
                                </div>
                                <div class="user-card-content">
                                    <h2>@developer.Name</h2>
                                    <span class="badge @(developer.IsActive && developer.Point != null ? "badge-success" : "badge-warning")">@(developer.IsActive ? (developer.Point != null ? "voted" : "voting") : "offline")</span>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        }
    }
    else
    {
        <Voting votinghubConnection=@hubConnection votingRoom=@room user=@developers?.FirstOrDefault(x => x.Name == Username) />
    }

</div>

<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Final Decision</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p class="text-muted">The card point selected here will be the final decision for the task.</p>

                <div class="form-group">
                    <label>Task</label>
                    <input type="text" class="form-control" @bind="votedTaskName" placeholder="Task Name">
                </div>
                <div class="form-group">
                    <label>Point</label>
                    <select class="form-control" @bind=@comfirmedTaskPoint>
                        @foreach (var card in Enum.GetValues(typeof(CardPoints)).Cast<CardPoints>().ToList())
                        {
                            <option value=@card>@ScrumPoker.Model.Extensions.GetEnumDescription(card)</option>
                        }
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success" @onclick="SaveVoting" data-dismiss="modal">Save Voting</button>
            </div>
        </div>
    </div>
</div>


@code {

    [Parameter] public string RoomName { get; set; }
    [Parameter] public string Username { get; set; }

    private int userRole { get; set; }

    private string taskName;
    private CardPoints agreedCard;

    private HubConnection hubConnection;
    private Room room;
    public Room _room
    {
        get
        {
            return room;
        }
        set
        {
            room = value;
            if (room.Users.FirstOrDefault(p => p.Name.Equals(Username)) == null)
                NavigationManager.NavigateTo($"/");
        }
    }

    private List<User> developers;

    private string votedTaskName;
    private CardPoints? comfirmedTaskPoint;
    private int nearestPoint;

    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/roomhub"))
        .Build();

        hubConnection.On<Room>("ReceiveMessage", (data) =>
        {
            _room = data;
            developers = data.Users.Where(x => x.Role == RoleType.DEV).ToList();

            StateHasChanged();
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("GetGroupMessages", RoomName);

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //if (firstRender)
        //{
        userRole = await localStorage.GetItemAsync<int>("userRole");
        //}
    }

    protected async Task StartVoting()
    {
        var task = new JiraTask
        {
            Status = JiraTaskStatus.Voting
        };

        await hubConnection.SendAsync("StartVoting", RoomName, task);
    }

    void KickUser(string kickUserName)
    {
        hubConnection.SendAsync("LeaveRoomAsync", room.Name, kickUserName);
        localStorage.ClearAsync();
    }

    private bool isAdmin()
    {
        return ((int)userRole == (int)RoleType.SM || (int)userRole == (int)RoleType.PO);
    }


    protected async Task SaveVoting()
    {
        await hubConnection.SendAsync("SaveTask", RoomName, votedTaskName, comfirmedTaskPoint);

        votedTaskName = string.Empty;
        comfirmedTaskPoint = null;
    }

    protected async Task StopVoting()
    {
        await hubConnection.SendAsync("StopVoting", RoomName);
    }
}
