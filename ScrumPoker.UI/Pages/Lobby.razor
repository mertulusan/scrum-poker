@page "/lobby/{roomName}"
@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage

<style type="text/css">
    .user-list {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
    }

    .user-card {
        border-radius: 5px;
        height: 140px;
        max-width: 160px;
        width: 45vw;
        font-size: 18px;
        font-weight: 500;
        letter-spacing: 0;
        text-align: center;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        position: relative;
        margin: 15px;
    }
</style>

@* 10dan düşük olduğunda +20 dakika için huba gönderim yapılmalı. senkronize değil şu an *@
<TimerComponent room="@room" hubConnection="@hubConnection" username="@userName" />

<ul>
    @foreach (var task in room?.VotedTaskList ?? new List<JiraTask>())
    {
        <h5>@task.Name : @task.Average</h5>
    }
</ul>



@if (room?.VotingTask?.Status == null)
{<div class="container">
        <div class="row mb-5">
            <div class="col">
                <div class="card">
                    <div class="card-body text-center">
                        <h3 class="card-title">Room: @RoomName</h3>
                        <div class="row">
                            <div class="col">
                                <button type="button" class="btn btn-success btn-lg" @onclick="StartVoting">Start Voting</button>
                            </div>
                        </div>


                        @if (developers?.Count > 0)
                        {
                            @for (int i = 0; i < developers.Count; i += 5)
                            {
                                <div class="row d-flex justify-content-center">
                                    @foreach (var developer in developers.Skip(i).Take(5))
                                    {
                                        <div class="user-list">
                                            <div class="user-card border">
                                                <h5 class="card-title">@developer.Name</h5>
                                                <span class="badge rounded-pill @(developer.IsActive ? "bg-success" : "bg-danger") text-white">@(developer.IsActive ? "Online" : "Offline")</span>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        }

                    </div>
                </div>
            </div>
        </div>
    </div>
}
else if (room?.VotingTask?.Status == JiraTaskStatus.Completed)
{
    <h3 class="card-title">Avarage: @room.VotingTask.Average.ToString("###.##")</h3>
    <div class="form-group row">
        <div class="col-sm-5">
            <input type="text" class="form-control" @bind="taskName" placeholder="User Name">
        </div>

        <div class="dropdown">
            <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Dropdown button
            </button>
            <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                @foreach (var card in Enum.GetValues(typeof(CardPoints)).Cast<CardPoints>().ToList())
                {
                    <a class="dropdown-item">@ScrumPoker.Model.Extensions.GetEnumDescription(card)</a>
                }
            </div>
        </div>

    </div>
    <div class="row">
        <div class="col">
            <button type="button" class="btn btn-success btn-lg" @onclick="StartVoting">Start Voting</button>
        </div>
    </div>
    @if (developers?.Count > 0)
    {
        @for (int i = 0; i < developers.Count; i += 5)
        {
            <div class="row d-flex justify-content-center">
                @foreach (var developer in developers.Skip(i).Take(5))
                {
                    <div class="user-list">
                        <div class="user-card border">
                            <h5 class="card-title">@developer.Name</h5>
                            <span class="badge rounded-pill">@ScrumPoker.Model.Extensions.GetEnumDescription(@developer.Point)</span>
                        </div>
                    </div>
                }
            </div>
        }
    }
}
else if (userRole != RoleType.DEV || room?.VotingTask?.Status == JiraTaskStatus.Voting && developers?.FirstOrDefault(x => x.Name == userName)?.Point != null)
{
    @if (developers?.Count > 0)
    {
        @for (int i = 0; i < developers.Count; i += 5)
        {
            <div class="row d-flex justify-content-center">
                @foreach (var developer in developers.Skip(i).Take(5))
                {
                    <div class="user-list">
                        <div class="user-card border">
                            <h5 class="card-title">@developer.Name</h5>
                            <span class="badge rounded-pill @(developer.IsActive && developer.Point!=null? "bg-success" : "bg-danger") text-white">@(developer.IsActive ? (developer.Point != null? "Voted":"Waiting") : "Offline")</span>
                        </div>
                    </div>
                }
            </div>
        }
    }
}
else
{
    <Voting votinghubConnection=@hubConnection votingRoom=@room />
}

@code {

    [Parameter] public string RoomName { get; set; }

    private string userName { get; set; }
    private RoleType userRole { get; set; }
    private string taskName;
    private CardPoints agreedCard;

    private HubConnection hubConnection;
    private Room room;
    private List<User> developers;

    protected override async Task OnInitializedAsync()
    {
        GetLocalStorage();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/roomhub"))
            .Build();

        hubConnection.On<Room>("ReceiveMessage", (data) =>
        {
            room = data;
            developers = data.Users.Where(x => x.Role == RoleType.DEV).ToList();
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("GetGroupMessages", RoomName);
    }

    protected async Task StartVoting()
    {
        var task = new JiraTask
        {
            Status = JiraTaskStatus.Voting
        };

        await hubConnection.SendAsync("StartVoting", RoomName, task);
    }

    async void GetLocalStorage()
    {
        userName = await localStorage.GetItemAsStringAsync("userName");
        userRole = await localStorage.GetItemAsync<RoleType>("userRole");
    }
}
