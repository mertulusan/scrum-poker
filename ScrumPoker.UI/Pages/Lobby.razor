@page "/lobby/{roomName}/{userName}"
@using Microsoft.AspNetCore.SignalR.Client
@using ScrumPoker.Model.Model
@using ScrumPoker.Model.Enums
@using ScrumPoker.UI.Components
@inject NavigationManager NavigationManager


<style type="text/css">
    .user-list {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
    }

    .user-card {
        border-radius: 5px;
        height: 140px;
        max-width: 160px;
        width: 45vw;
        font-size: 18px;
        font-weight: 500;
        letter-spacing: 0;
        text-align: center;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        position: relative;
        margin: 15px;
    }
</style>

@* 10dan düşük olduğunda +20 dakika için huba gönderim yapılmalı. senkronize değil şu an *@
<TimerComponent room="@room" hubConnection="@hubConnection" username="@Username" />

<div class="container">
    <div class="row mb-5">
        <div class="col">
            <div class="card">
                <div class="card-body text-center">
                    <h3 class="card-title">Room: @RoomName</h3>

                    <div class="row">
                        <div class="col">
                            <button type="button" class="btn btn-success btn-lg">Start Voting</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (room?.Users?.Count > 0)
    {
        @for (int i = 0; i < room.Users.Count; i += 5)
        {
            <div class="row d-flex justify-content-center">
                @foreach (var user in room.Users.Skip(i).Take(5))
                {
                    <div class="user-list">
                        <div class="user-card border">

                            @* ToDo: İşlem yapan kullanıcının yetkisi varmı kontrolü eklenmeli *@
                            @if (new[] { RoleType.SM, RoleType.PO }.Contains(room?.Users?.FirstOrDefault(p => p.Name.Equals(Username))?.Role ?? RoleType.DEV))
                            {
                                <button @onclick="@(p=>KickUser(user.Name))" style="margin-left: auto;margin-bottom: auto; margin-top: 0; margin-right: 0; padding:15px 15px 15px 15px;">x</button>
                            }


                            <h5 class="card-title">@user.Name</h5>
                            <span class="badge rounded-pill @(user.IsActive ? "bg-success" : "bg-danger") text-white">@(user.IsActive ? "online" : "offline")</span>
                        </div>
                    </div>
                }
            </div>
        }
    }
</div>
@code {

    [Parameter] public string RoomName { get; set; }
    [Parameter] public string Username { get; set; }

    private HubConnection hubConnection;
    public Room room;
    public Room _room
    {
        get
        {
            return room;
        }
        set { 
            room = value; 
            if (room.Users.FirstOrDefault(p => p.Name.Equals(Username)) == null)
                NavigationManager.NavigateTo($"/");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/roomhub"))
            .Build();

        hubConnection.On<Room>("ReceiveMessage", (data) =>
        {
            _room = data;
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("GetGroupMessages", RoomName);
    }

    void KickUser(string kickUserName)
    {
        hubConnection.SendAsync("KickUser", room.Name, kickUserName);
    }
}
