@page "/lobby/{roomName}/{userName}"
@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage

<div class="task-panel">
    @*   Left Panel   *@
    <div class="task-panel-header">
        <div class="row mb-2">
            <div class="col">
                <button type="button" class="btn btn-danger btn-sm ml-2 float-right" @onclick="@(p=>LeaveRoom(Username))"><i class="fas fa-sign-out-alt fa-lg"></i>&nbsp;Quit</button>
                <TimerComponent room="@room" hubConnection="@hubConnection" username="@Username" />
            </div>
        </div>
        <div class="row">
            <div class="col p-0">
                <div class="card card-body">
                    <small>Room</small>
                    <h3>@RoomName</h3>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <Tabs>
            @if (room != null && room.Users.Any())
            {
                <Tab>
                    <Header>
                        <i class="fas fa-users" style="margin:5px"></i>
                        <span class="badge badge-danger">
                            @room?.Users?.Count
                        </span>
                    </Header>
                    <ChildContent>
                        <UserListComponent users="@room.Users"></UserListComponent>
                    </ChildContent>
                </Tab>
            }
            @if (room != null && room.VotedTaskList.Any())
            {
                <Tab>
                    <Header>
                        <i class="fas fa-list" style="margin:5px"></i>
                        <span class="badge badge-primary"> @room?.VotedTaskList?.Count</span>
                    </Header>
                    <ChildContent>
                        <TaskListComponent room="@room"></TaskListComponent>
                    </ChildContent>
                </Tab>
            }
        </Tabs>
    </div>
</div>


<div class="content-panel animated fadeInRight">
    @if (room?.VotingTask?.Status == null)
    {
        <div class="card">
            <div class="card-body justify-content-center">
                <button type="button" class="btn btn-success btn-md float-right" @onclick="StartVoting">Start Voting</button>
            </div>
        </div>

        @if (developers?.Count > 0)
        {
            @for (int i = 0; i < developers.Count; i += 5)
            {
                <div class="row d-flex justify-content-center ">
                    <div class="user-list">
                        @foreach (var developer in developers.Skip(i).Take(5))
                        {
                            <div class="user-card">
                                <div class="user-card-title">
                                    @if (isAdmin())
                                    {
                                        <a class="float-right" @onclick="@(p=>LeaveRoom(developer.Name))"><i class="fa fa-remove"></i></a>
                                    }
                                </div>
                                <div class="user-card-content">
                                    <h2>@developer.Name</h2>
                                    <span class="badge  @(developer.IsActive ? "badge-success" : "badge-danger") text-white">@(developer.IsActive ? "online" : "offline")</span>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        }
    }
    else if (room?.VotingTask?.Status == JiraTaskStatus.Completed)
    {
        <div class="card">
            <div class="card-body justify-content-center">
                <h3 style="display:inline-block;">Avarage: @room.VotingTask.Average.ToString("###.##")</h3>
                <div class="btn-group float-right" role="group">
                    <button type="button" class="btn btn-success">Restart Voting</button> @*TO DO*@
                    <button type="button" class="btn btn-primary" @onclick=@(() => comfirmedTaskPoint = VotePointHelper.GetNearestCard(room.Users.Where(p => p.Point != null).Select(s => (CardPoints)s.Point).ToList()))>
                        Save Task
                    </button>
                </div>

                @if (comfirmedTaskPoint != null)
                {
                    <hr />
                    <div class="form-group row">
                        <div class="col-sm-4">
                            <label class="text-muted">The card point selected here will be the final decision for the task.</label>
                            <div class="input-group">
                                <input type="text" class="form-control" @bind="votedTaskName" placeholder="Task Name">
                                <div class="input-group-append">
                                    <select class="form-control float-right" @bind=@comfirmedTaskPoint>
                                        @foreach (var card in Enum.GetValues(typeof(CardPoints)).Cast<CardPoints>().ToList())
                                        {
                                            <option value=@card>@ScrumPoker.Model.Extensions.GetEnumDescription(card)</option>
                                        }
                                    </select>
                                    <button type="button" class="btn btn-success form-control  float-right" @onclick="SaveVoting" data-dismiss="modal">Save Voting</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

        @if (developers?.Count > 0)
        {
            <div class="row d-flex justify-content-center">
                <div class="user-list">
                    @for (int i = 0; i < developers.Count; i += 5)
                    {
                        @foreach (var developer in developers.Skip(i).Take(5))
                        {
                            <div class="user-card">
                                <div class="user-card-title">
                                    @if (isAdmin())
                                    {
                                        <a class="float-right" @onclick="@(p=>LeaveRoom(developer.Name))"><i class="fa fa-remove"></i></a>
                                    }
                                </div>
                                <div class="user-card-content">
                                    <h2>@developer.Name</h2>
                                    <span class="badge badge-primary">@ScrumPoker.Model.Extensions.GetEnumDescription(@developer.Point)</span>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        }
    }
    else if (RoleType.DEV != developers?.FirstOrDefault(x => x.Name == Username)?.Role || room?.VotingTask?.Status == JiraTaskStatus.Voting && developers?.FirstOrDefault(x => x.Name == Username)?.Point != null)
    {

        @if (new[] { RoleType.PO, RoleType.SM }.Contains((RoleType)room?.Users?.FirstOrDefault(p => p.Name == Username)?.Role))
        {
            <div class="card">
                <div class="card-body justify-content-center">
                    <button type="button" class="btn btn-danger btn-md float-right" @onclick="StopVoting">Stop Voting</button>
                </div>
            </div>
        }

        @if (developers?.Count > 0)
        {
            <div class="row d-flex justify-content-center">
                <div class="user-list">
                    @for (int i = 0; i < developers.Count; i += 5)
                    {

                        @foreach (var developer in developers.Skip(i).Take(5))
                        {
                            <div class="user-card">
                                <div class="user-card-title">
                                    @if (isAdmin())
                                    {
                                        <a class="float-right" @onclick="@(p=>LeaveRoom(developer.Name))"><i class="fa fa-remove"></i></a>
                                    }
                                </div>
                                <div class="user-card-content @(developer.Point==null?"sk-loading":"") ">
                                    <h2>@developer.Name</h2>

                                    <div class="sk-spinner sk-spinner-wave">
                                        <div class="sk-rect1"></div>
                                        <div class="sk-rect2"></div>
                                        <div class="sk-rect3"></div>
                                        <div class="sk-rect4"></div>
                                        <div class="sk-rect5"></div>
                                    </div>
                                    <span class="badge @(developer.IsActive && developer.Point != null ? "badge-success" : "badge-warning")">@(developer.IsActive ? (developer.Point != null ? "voted" : "") : "offline")</span>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        }
    }
    else
    {
        <Voting votinghubConnection=@hubConnection votingRoom=@room user=@developers?.FirstOrDefault(x => x.Name == Username) />
    }

</div>


@code {
    [Parameter] public string RoomName { get; set; }
    [Parameter] public string Username { get; set; }

    private int userRole { get; set; }

    private string taskName;
    private CardPoints agreedCard;

    private HubConnection hubConnection;
    private Room room;
    public Room _room
    {
        get
        {
            return room;
        }
        set
        {
            room = value;
            if (room.Users.FirstOrDefault(p => p.Name.Equals(Username)) == null)
                NavigationManager.NavigateTo($"/");
        }
    }

    private List<User> developers;

    private string votedTaskName;
    private CardPoints? comfirmedTaskPoint;
    private int nearestPoint;

    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/roomhub"))
        .Build();

        hubConnection.On<Room>("ReceiveMessage", (data) =>
        {
            _room = data;
            developers = data.Users.Where(x => x.Role == RoleType.DEV).ToList();

            StateHasChanged();
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("GetGroupMessages", RoomName);

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        userRole = await localStorage.GetItemAsync<int>("userRole");
    }

    protected async Task StartVoting()
    {
        var task = new JiraTask
        {
            Status = JiraTaskStatus.Voting
        };

        await hubConnection.SendAsync("StartVoting", RoomName, task);
    }

    void LeaveRoom(string userName)
    {
        hubConnection.SendAsync("LeaveRoomAsync", room.Name, userName);
    }

    private bool isAdmin()
    {
        return ((int)userRole == (int)RoleType.SM || (int)userRole == (int)RoleType.PO);
    }


    protected async Task SaveVoting()
    {
        await hubConnection.SendAsync("SaveTask", RoomName, votedTaskName, comfirmedTaskPoint);

        votedTaskName = string.Empty;
        comfirmedTaskPoint = null;
    }

    protected async Task StopVoting()
    {
        await hubConnection.SendAsync("StopVoting", RoomName);
    }
}
